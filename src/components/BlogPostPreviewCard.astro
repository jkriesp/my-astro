---
import TagList from './TagList.astro';
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
// Import placeholder images
import placeholder1 from '../images/blog-placeholder-1.jpg';
import placeholder2 from '../images/blog-placeholder-2.jpg';
import placeholder3 from '../images/blog-placeholder-3.jpg';
import placeholder4 from '../images/blog-placeholder-4.jpg';
import placeholder5 from '../images/blog-placeholder-5.jpg';
import placeholderAbout from '../images/blog-placeholder-about.jpg';

interface Props {
    post: CollectionEntry<'blog'>;
}
const { post } = Astro.props;
const { title, description, heroImage, tags = [] } = post.data;

// Map hero image paths to the imported image objects
const heroImageMap = {
  '/blog-placeholder-1.jpg': placeholder1,
  '/blog-placeholder-2.jpg': placeholder2,
  '/blog-placeholder-3.jpg': placeholder3,
  '/blog-placeholder-4.jpg': placeholder4,
  '/blog-placeholder-5.jpg': placeholder5,
  '/blog-placeholder-about.jpg': placeholderAbout
};

// Get the appropriate image based on the heroImage path
const imageSource = heroImage ? heroImageMap[heroImage as keyof typeof heroImageMap] : undefined;
---
<div class="card">
    <div class="image-container">
        {imageSource && (
          <Image 
            src={imageSource} 
            alt={description || title}
            width={600}
            height={400}
            class="card-image"
            quality={80}
          />
        )}
        <div class="image-overlay">
            <div class="read-indicator">
                <a href={`/blog/${post.slug}/`} class="button-link">Read Post</a>
            </div>
        </div>
    </div>
    <div class="content">
        <h3 class="post-title">
            <a href={`/blog/${post.slug}/`} class="title-link">{title}</a>
        </h3>
        <p class="post-description">{description}</p>
        <div class="tags-container">
            <TagList tags={tags} className="post-tags" />
        </div>
    </div>
</div>

<script>
  // Only run this script on mobile devices
  const isMobile = window.innerWidth < 768;
  
  if (isMobile) {
    document.addEventListener('DOMContentLoaded', () => {
      const cards = document.querySelectorAll('.card');
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          // When card is 40% visible in the viewport
          if (entry.isIntersecting && entry.intersectionRatio > 0.4) {
            entry.target.classList.add('mobile-in-view');
          } else {
            entry.target.classList.remove('mobile-in-view');
          }
        });
      }, {
        threshold: [0.4], // Trigger when 40% visible
        rootMargin: '0px' // No margin
      });
      
      cards.forEach(card => {
        observer.observe(card);
      });
    });
  }
</script>

<style>
  .card {
    @apply flex-1 min-w-[300px] max-w-md m-4 bg-white dark:bg-gray-800 rounded-lg overflow-hidden;
    @apply border border-gray-200 dark:border-gray-700;
    @apply transition-all duration-300 ease-in-out;
    @apply shadow-sm;
    position: relative;
    transform-style: preserve-3d;
    perspective: 1000px;
  }
  
  .card:hover {
    @apply -translate-y-2 shadow-md;
    transform: rotateX(2deg) rotateY(0deg);
  }
  
  .image-container {
    @apply relative overflow-hidden;
  }
  
  .card-image {
    @apply w-full h-auto object-cover transition-transform duration-300;
  }
  
  .card:hover .card-image {
    transform: scale(1.05);
  }
  
  .image-overlay {
    @apply absolute inset-0 bg-black bg-opacity-0 flex items-center justify-center transition-all duration-300;
    opacity: 0;
  }
  
  .card:hover .image-overlay {
    @apply bg-opacity-30;
    opacity: 1;
  }
  
  /* Mobile in-view styles (for scroll-based appearance) */
  @media (max-width: 767px) {
    .mobile-in-view .image-overlay {
      @apply bg-opacity-30;
      opacity: 1;
    }
    
    .mobile-in-view .read-indicator {
      @apply translate-y-0 opacity-100;
    }
  }
  
  .read-indicator {
    @apply px-4 py-2 bg-blue-600 text-white rounded-md transform translate-y-4 opacity-0 transition-all duration-300;
    @apply border-0 cursor-pointer;
  }
  
  .read-indicator .button-link {
    @apply text-white no-underline font-medium;
    display: block;
  }
  
  .card:hover .read-indicator {
    @apply translate-y-0 opacity-100;
  }
  
  .read-indicator:hover {
    @apply bg-blue-700 dark:bg-blue-500;
    transform: scale(1.05);
  }
  
  .content {
    @apply p-6;
  }
  
  .post-title {
    @apply transition-colors duration-300;
    position: relative;
    display: inline-block;
  }
  
  .post-title .title-link {
    @apply text-inherit no-underline;
    display: block;
  }
  
  .post-title::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    @apply bg-blue-600 dark:bg-blue-400;
    transition: width 0.3s ease;
  }
  
  .card:hover .post-title::after {
    width: 100%;
  }
  
  .post-description {
    @apply mt-2 transition-all duration-300;
  }

  .tags-container {
    @apply mt-4 mb-2 pt-2 pb-2;
  }
  
  .sr-only {
    @apply absolute w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap border-0;
  }
  
  @media (max-width: 640px) {
    .card {
      @apply min-w-[250px] m-2;
    }
    
    .content {
      @apply p-4;
    }
  }
</style>
